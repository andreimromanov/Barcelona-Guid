// pages/api/frame-action.tsx
import React from "react"
import { createFrames, Button } from "frames.js/next"
import { writeContract } from "@wagmi/core"
import abi from "../../abi/FitnessDiary.json"
import { config } from "../../lib/wagmi"

const CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS as `0x${string}`

const frames = createFrames({
  basePath: "/api/frame-action",
})

export default frames(async (ctx) => {
  const action = ctx.searchParams?.action ?? ""

  if (action === "entries") {
    // üîπ —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏, —Å–µ–π—á–∞—Å ‚Äî –∑–∞–≥–ª—É—à–∫–∞
    return {
      image: (
        <div style={{ fontSize: 28, color: "black", padding: 40 }}>
          –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:
          <br />‚Ä¢ 80.0 –∫–≥ ‚Äî 2500/3000 –∫–∞–ª, 12000 —à–∞–≥–æ–≤
          <br />‚Ä¢ 79.5 –∫–≥ ‚Äî 2400/3100 –∫–∞–ª, 11000 —à–∞–≥–æ–≤
        </div>
      ),
      buttons: [
        <Button key="back" action="post" target="/api/frame-action">
          üîô –ù–∞–∑–∞–¥
        </Button>,
      ],
    }
  }

  if (action === "log") {
    return {
      image: (
        <div style={{ fontSize: 28, color: "blue", padding: 40 }}>
          –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:
          <br />
          üìÖ YYYYMMDD, ‚öñÔ∏è –í–µ—Å (–∫–≥), üî• –ö–∞–ª–æ—Ä–∏–∏ In, üí™ –ö–∞–ª–æ—Ä–∏–∏ Out, üö∂ –®–∞–≥–∏
        </div>
      ),
      textInput: "20250929,79.3,2500,3000,12000",
      buttons: [
        <Button key="save" action="post" target="/api/frame-action?action=save">
          ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>,
      ],
    }
  }

  if (action === "save") {
    try {
      const input = ctx.message?.inputText || "" // —Å—Ç—Ä–æ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const parts = input.split(",").map((p: string) => p.trim()) // <-- ‚úÖ —Ñ–∏–∫—Å

      if (parts.length < 5) {
        throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
      }

      const [dateStr, weightStr, calInStr, calOutStr, stepsStr] = parts

      const ymd = Number(dateStr)
      const weight = Math.round(Number(weightStr) * 1000) // –∫–≥ ‚Üí –≥—Ä–∞–º–º—ã
      const caloriesIn = Number(calInStr)
      const caloriesOut = Number(calOutStr)
      const steps = Number(stepsStr)

      // –ó–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      await writeContract(config, {
        abi,
        address: CONTRACT_ADDRESS,
        functionName: "logEntry",
        args: [ymd, weight, caloriesIn, caloriesOut, steps],
      })

      return {
        image: (
          <div style={{ fontSize: 28, color: "green", padding: 40 }}>
            ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
            <br />
            –í–µ—Å: {weightStr} –∫–≥
            <br />
            –ö–∞–ª–æ—Ä–∏–∏: {calInStr}/{calOutStr}
            <br />
            –®–∞–≥–∏: {stepsStr}
          </div>
        ),
        buttons: [
          <Button key="back2" action="post" target="/api/frame-action">
            üîô –ù–∞–∑–∞–¥
          </Button>,
        ],
      }
    } catch (err: any) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
      return {
        image: (
          <div style={{ fontSize: 28, color: "red", padding: 40 }}>
            ‚ùå –û—à–∏–±–∫–∞: {err.message}
          </div>
        ),
        buttons: [
          <Button key="back3" action="post" target="/api/frame-action">
            üîô –ù–∞–∑–∞–¥
          </Button>,
        ],
      }
    }
  }

  // fallback
  return {
    image: (
      <div style={{ fontSize: 28, color: "black", padding: 40 }}>
        üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fitness Diary
      </div>
    ),
    buttons: [
      <Button key="entries" action="post" target="/api/frame-action?action=entries">
        üìñ –ú–æ–∏ –∑–∞–ø–∏—Å–∏
      </Button>,
      <Button key="log" action="post" target="/api/frame-action?action=log">
        ‚ûï –î–æ–±–∞–≤–∏—Ç—å
      </Button>,
    ],
  }
})
